"""
Django settings for crosschecker project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

log_dir = os.path.join(BASE_DIR, 'info_log')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qgxpcf$&mo797_pz)c67%%d269bqcr)*4yd6k+yg*_r3mo3+3w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'checker',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #Custom middlewares
    "checker.middlewares.LogRequestResponseMiddlewares.ErrorHandlingMiddleWare",
    "checker.middlewares.LogRequestResponseMiddlewares.DebugLoggingMiddleware",
    "checker.middlewares.LogRequestResponseMiddlewares.InfoLoggingMiddleware",
    "checker.middlewares.LogRequestResponseMiddlewares.WarningLoggingMiddleware",
    "checker.middlewares.LogRequestResponseMiddlewares.CriticalLoggingMiddleware",
    "checker.middlewares.TimeMiddleWare.PerformanceMiddleware"
]

ROOT_URLCONF = 'crosschecker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crosschecker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE'),
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'checker.CustomUser'

LOGGING = {
    "version":1,
    'disable_existing_loggers': False,
    "formatters":{
        "verbose":{
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        "simple":{
            'format': '{asctime} {levelname}  {message}',
            'style': '{',
             
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','info.log'),
            'formatter': 'verbose',
        },
        'file_app': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','info_app.log'),
            'formatter': 'verbose',
        },




        'debug_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','debug.log'),
            'formatter': 'verbose'
        },
        'info_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','info.log'),
            'formatter': 'verbose'
        },
        'warning_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','warning.log'),
            'formatter': 'verbose'
        },
        'error_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','error.log'),
            'formatter': 'verbose'
        },
        'critical_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'info_log','critical.log'),
            'formatter': 'verbose'
        },
        
    },
    
    "loggers":{
        "django":{
            "handlers":["console","file"],
            "level":"INFO",
            "propagate":True
        },
        "checker":{
            "handlers":["console","file_app"],
            "level":"INFO",
            "propagate":True#set it to false if you want only the info logger to be called
        },




        'debug': {
            'handlers': ['debug_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'info': {
            'handlers': ['info_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'warning': {
            'handlers': ['warning_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'error': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'critical': {
            'handlers': ['critical_file'],
            'level': 'CRITICAL',
            'propagate': False,
        },
    }
}

